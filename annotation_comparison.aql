// 注解实现方式对比：闭包 vs 函数参数

// ============= 方式1：闭包方式（装饰器模式） =============

// 1.1 闭包方式的计时注解
function timingClosure(originalFunc) {
    let callCount = 0;  // 闭包可以保存状态
    
    function wrapper() {
        callCount = callCount + 1;
        // 调用前的逻辑
        let result = originalFunc();
        // 调用后的逻辑
        return result;
    }
    return wrapper;
}

// 1.2 闭包方式的重试注解
function retryClosure(originalFunc, maxAttempts) {
    function retryWrapper() {
        let attempts = 0;
        let result = originalFunc();  // 实际中会有重试逻辑
        return result;
    }
    return retryWrapper;
}

// 1.3 使用闭包方式
function businessLogic1() {
    return 42;
}

// 应用装饰器
let decoratedBusiness1 = timingClosure(businessLogic1);
let finalBusiness1 = retryClosure(decoratedBusiness1, 3);

// ============= 方式2：函数参数方式 =============

// 2.1 参数方式的注解处理器
function executeWithAnnotations(func, annotations) {
    // 处理timing注解
    if (annotations) {
        // 在实际实现中会解析annotations参数
        let result = func();
        return result;
    } else {
        return func();
    }
}

// 2.2 参数方式的业务函数
function businessLogic2() {
    return 42;
}

// 2.3 使用参数方式
let result2 = executeWithAnnotations(businessLogic2, "timing,retry");

// ============= 测试和对比 =============

// 测试闭包方式
let closureResult = finalBusiness1();

// 测试参数方式  
let paramResult = result2;

// 输出结果
closureResult; 