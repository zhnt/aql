// 复杂二维数组测试

// 创建5x5的数字矩阵
let matrix = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25]
];

// 创建3x4的字符串矩阵
let stringMatrix = [
    ["A", "B", "C", "D"],
    ["E", "F", "G", "H"],
    ["I", "J", "K", "L"]
];

// 创建混合类型矩阵
let mixedMatrix = [
    [1, "hello", 3.14],
    ["world", 42, "test"],
    [100, "end", 200]
];

// 访问二维数组元素
let element00 = matrix[0][0];     // 1
let element22 = matrix[2][2];     // 13
let element44 = matrix[4][4];     // 25

let strElement = stringMatrix[1][2];  // "G"
let mixedElement = mixedMatrix[0][1]; // "hello"

// 修改二维数组元素
matrix[0][0] = 99;
matrix[2][2] = 999;
stringMatrix[1][2] = "MODIFIED";
mixedMatrix[0][1] = "CHANGED";

// 获取修改后的元素
let modifiedElement1 = matrix[0][0];     // 99
let modifiedElement2 = matrix[2][2];     // 999
let modifiedStr = stringMatrix[1][2];    // "MODIFIED"
let modifiedMixed = mixedMatrix[0][1];   // "CHANGED"

// 创建不规则二维数组（锯齿数组）
let jaggedArray = [
    [1, 2],
    [3, 4, 5, 6],
    [7, 8, 9],
    [10]
];

// 访问不规则数组
let jagged1 = jaggedArray[0][1];    // 2
let jagged2 = jaggedArray[1][3];    // 6
let jagged3 = jaggedArray[2][0];    // 7
let jagged4 = jaggedArray[3][0];    // 10

// 动态创建二维数组
let dynamicMatrix = [];
dynamicMatrix[0] = ["row0_col0", "row0_col1", "row0_col2"];
dynamicMatrix[1] = ["row1_col0", "row1_col1", "row1_col2"];
dynamicMatrix[2] = ["row2_col0", "row2_col1", "row2_col2"];

// 访问动态创建的矩阵
let dynamicElement1 = dynamicMatrix[0][0];  // "row0_col0"
let dynamicElement2 = dynamicMatrix[1][1];  // "row1_col1"
let dynamicElement3 = dynamicMatrix[2][2];  // "row2_col2"

// 修改动态矩阵
dynamicMatrix[0][0] = "UPDATED_0_0";
dynamicMatrix[1][1] = "UPDATED_1_1";
dynamicMatrix[2][2] = "UPDATED_2_2";

// 获取修改后的动态元素
let updatedDynamic1 = dynamicMatrix[0][0];  // "UPDATED_0_0"
let updatedDynamic2 = dynamicMatrix[1][1];  // "UPDATED_1_1"
let updatedDynamic3 = dynamicMatrix[2][2];  // "UPDATED_2_2"

// 创建包含数组的数组
let arrayOfArrays = [
    [1, 2, 3],
    ["a", "b", "c"],
    [true, false, true]
];

// 访问包含不同类型数组的元素
let numFromArray = arrayOfArrays[0][1];     // 2
let strFromArray = arrayOfArrays[1][0];     // "a"
let boolFromArray = arrayOfArrays[2][2];    // true

// 计算一些简单的结果用于返回
let sumOfElements = element00 + element22 + element44;
let finalResult = sumOfElements + 1000;

return finalResult; 