// AQL数组操作测试

// 1. 数组作为函数参数
function getFirst(arr) {
    return arr[0];
}

function getSum(arr) {
    return arr[0] + arr[1] + arr[2];
}

let testArray = [10, 20, 30];
let first = getFirst(testArray);  // 10
let sum = getSum(testArray);      // 60

// 2. 函数返回数组
function createArray() {
    return [1, 2, 3];
}

function createMatrix() {
    return [[1, 2], [3, 4]];
}

let returned = createArray();
let returnedFirst = returned[0];  // 1

let matrix = createMatrix();
let matrixElement = matrix[1][0];  // 3

// 3. 数组与闭包
function createArrayProcessor() {
    let data = [5, 10, 15];
    
    function process() {
        return data[0] + data[1] + data[2];
    }
    
    return process;
}

let processor = createArrayProcessor();
let processed = processor();  // 30

// 4. 数组修改函数
function modifyArray(arr) {
    arr[0] = 100;
    arr[1] = 200;
    return arr[0] + arr[1];
}

let modArray = [1, 2, 3];
let modResult = modifyArray(modArray);  // 300
let modCheck = modArray[0] + modArray[1];  // 100 + 200 = 300

// 5. 二维数组操作
function get2DElement(matrix, row, col) {
    return matrix[row][col];
}

function sum2DRow(matrix, row) {
    return matrix[row][0] + matrix[row][1];
}

let matrix2D = [[1, 2], [3, 4], [5, 6]];
let element = get2DElement(matrix2D, 1, 1);  // 4
let rowSum = sum2DRow(matrix2D, 2);          // 5 + 6 = 11

// 6. 数组长度计算（通过遍历）
function countElements(arr) {
    let count = 0;
    // 简单的计数（假设不超过10个元素）
    let i = 0;
    if (arr[0] != null) count = count + 1;
    if (arr[1] != null) count = count + 1;
    if (arr[2] != null) count = count + 1;
    if (arr[3] != null) count = count + 1;
    if (arr[4] != null) count = count + 1;
    return count;
}

let countTest = [1, 2, 3];
let elementCount = countElements(countTest);  // 3

// 7. 数组复制（浅复制）
function copyFirstThree(arr) {
    return [arr[0], arr[1], arr[2]];
}

let original = [100, 200, 300, 400];
let copied = copyFirstThree(original);
let copySum = copied[0] + copied[1] + copied[2];  // 600

// 8. 字符串数组操作
function concatStrings(arr) {
    return arr[0] + arr[1] + arr[2];
}

let strings = ["Hello", " ", "World"];
let concatenated = concatStrings(strings);  // "Hello World"

// 计算验证结果
let basicSum = first + sum;                       // 10 + 60 = 70
let returnSum = returnedFirst + matrixElement;    // 1 + 3 = 4
let closureSum = processed;                       // 30
let modifySum = modResult + modCheck;             // 300 + 300 = 600
let matrix2DSum = element + rowSum;               // 4 + 11 = 15
let operationSum = elementCount + copySum;        // 3 + 600 = 603

// 返回验证结果
basicSum + returnSum + closureSum + modifySum + matrix2DSum + operationSum;  
// 70 + 4 + 30 + 600 + 15 + 603 = 1322 